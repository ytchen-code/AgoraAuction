package agora;

/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-04-22")
public class Auction implements org.apache.thrift.TBase<Auction, Auction._Fields>, java.io.Serializable, Cloneable, Comparable<Auction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Auction");

  private static final org.apache.thrift.protocol.TField ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("item", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField HIGHEST_BIDDER_FIELD_DESC = new org.apache.thrift.protocol.TField("highestBidder", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField OPEN_FIELD_DESC = new org.apache.thrift.protocol.TField("open", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AuctionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AuctionTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable Item item; // required
  public @org.apache.thrift.annotation.Nullable User highestBidder; // required
  public boolean open; // required
  public int timeout; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ITEM((short)1, "item"),
    HIGHEST_BIDDER((short)2, "highestBidder"),
    OPEN((short)3, "open"),
    TIMEOUT((short)4, "timeout");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITEM
          return ITEM;
        case 2: // HIGHEST_BIDDER
          return HIGHEST_BIDDER;
        case 3: // OPEN
          return OPEN;
        case 4: // TIMEOUT
          return TIMEOUT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPEN_ISSET_ID = 0;
  private static final int __TIMEOUT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITEM, new org.apache.thrift.meta_data.FieldMetaData("item", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Item.class)));
    tmpMap.put(_Fields.HIGHEST_BIDDER, new org.apache.thrift.meta_data.FieldMetaData("highestBidder", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
    tmpMap.put(_Fields.OPEN, new org.apache.thrift.meta_data.FieldMetaData("open", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Auction.class, metaDataMap);
  }

  public Auction() {
  }

  public Auction(
    Item item,
    User highestBidder,
    boolean open,
    int timeout)
  {
    this();
    this.item = item;
    this.highestBidder = highestBidder;
    this.open = open;
    setOpenIsSet(true);
    this.timeout = timeout;
    setTimeoutIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Auction(Auction other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetItem()) {
      this.item = new Item(other.item);
    }
    if (other.isSetHighestBidder()) {
      this.highestBidder = new User(other.highestBidder);
    }
    this.open = other.open;
    this.timeout = other.timeout;
  }

  public Auction deepCopy() {
    return new Auction(this);
  }

  @Override
  public void clear() {
    this.item = null;
    this.highestBidder = null;
    setOpenIsSet(false);
    this.open = false;
    setTimeoutIsSet(false);
    this.timeout = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public Item getItem() {
    return this.item;
  }

  public Auction setItem(@org.apache.thrift.annotation.Nullable Item item) {
    this.item = item;
    return this;
  }

  public void unsetItem() {
    this.item = null;
  }

  /** Returns true if field item is set (has been assigned a value) and false otherwise */
  public boolean isSetItem() {
    return this.item != null;
  }

  public void setItemIsSet(boolean value) {
    if (!value) {
      this.item = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public User getHighestBidder() {
    return this.highestBidder;
  }

  public Auction setHighestBidder(@org.apache.thrift.annotation.Nullable User highestBidder) {
    this.highestBidder = highestBidder;
    return this;
  }

  public void unsetHighestBidder() {
    this.highestBidder = null;
  }

  /** Returns true if field highestBidder is set (has been assigned a value) and false otherwise */
  public boolean isSetHighestBidder() {
    return this.highestBidder != null;
  }

  public void setHighestBidderIsSet(boolean value) {
    if (!value) {
      this.highestBidder = null;
    }
  }

  public boolean isOpen() {
    return this.open;
  }

  public Auction setOpen(boolean open) {
    this.open = open;
    setOpenIsSet(true);
    return this;
  }

  public void unsetOpen() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPEN_ISSET_ID);
  }

  /** Returns true if field open is set (has been assigned a value) and false otherwise */
  public boolean isSetOpen() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPEN_ISSET_ID);
  }

  public void setOpenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPEN_ISSET_ID, value);
  }

  public int getTimeout() {
    return this.timeout;
  }

  public Auction setTimeout(int timeout) {
    this.timeout = timeout;
    setTimeoutIsSet(true);
    return this;
  }

  public void unsetTimeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ITEM:
      if (value == null) {
        unsetItem();
      } else {
        setItem((Item)value);
      }
      break;

    case HIGHEST_BIDDER:
      if (value == null) {
        unsetHighestBidder();
      } else {
        setHighestBidder((User)value);
      }
      break;

    case OPEN:
      if (value == null) {
        unsetOpen();
      } else {
        setOpen((java.lang.Boolean)value);
      }
      break;

    case TIMEOUT:
      if (value == null) {
        unsetTimeout();
      } else {
        setTimeout((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ITEM:
      return getItem();

    case HIGHEST_BIDDER:
      return getHighestBidder();

    case OPEN:
      return isOpen();

    case TIMEOUT:
      return getTimeout();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ITEM:
      return isSetItem();
    case HIGHEST_BIDDER:
      return isSetHighestBidder();
    case OPEN:
      return isSetOpen();
    case TIMEOUT:
      return isSetTimeout();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Auction)
      return this.equals((Auction)that);
    return false;
  }

  public boolean equals(Auction that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_item = true && this.isSetItem();
    boolean that_present_item = true && that.isSetItem();
    if (this_present_item || that_present_item) {
      if (!(this_present_item && that_present_item))
        return false;
      if (!this.item.equals(that.item))
        return false;
    }

    boolean this_present_highestBidder = true && this.isSetHighestBidder();
    boolean that_present_highestBidder = true && that.isSetHighestBidder();
    if (this_present_highestBidder || that_present_highestBidder) {
      if (!(this_present_highestBidder && that_present_highestBidder))
        return false;
      if (!this.highestBidder.equals(that.highestBidder))
        return false;
    }

    boolean this_present_open = true;
    boolean that_present_open = true;
    if (this_present_open || that_present_open) {
      if (!(this_present_open && that_present_open))
        return false;
      if (this.open != that.open)
        return false;
    }

    boolean this_present_timeout = true;
    boolean that_present_timeout = true;
    if (this_present_timeout || that_present_timeout) {
      if (!(this_present_timeout && that_present_timeout))
        return false;
      if (this.timeout != that.timeout)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetItem()) ? 131071 : 524287);
    if (isSetItem())
      hashCode = hashCode * 8191 + item.hashCode();

    hashCode = hashCode * 8191 + ((isSetHighestBidder()) ? 131071 : 524287);
    if (isSetHighestBidder())
      hashCode = hashCode * 8191 + highestBidder.hashCode();

    hashCode = hashCode * 8191 + ((open) ? 131071 : 524287);

    hashCode = hashCode * 8191 + timeout;

    return hashCode;
  }

  @Override
  public int compareTo(Auction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetItem()).compareTo(other.isSetItem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.item, other.item);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHighestBidder()).compareTo(other.isSetHighestBidder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighestBidder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highestBidder, other.highestBidder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpen()).compareTo(other.isSetOpen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.open, other.open);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTimeout()).compareTo(other.isSetTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, other.timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Auction(");
    boolean first = true;

    sb.append("item:");
    if (this.item == null) {
      sb.append("null");
    } else {
      sb.append(this.item);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("highestBidder:");
    if (this.highestBidder == null) {
      sb.append("null");
    } else {
      sb.append(this.highestBidder);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("open:");
    sb.append(this.open);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeout:");
    sb.append(this.timeout);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (item != null) {
      item.validate();
    }
    if (highestBidder != null) {
      highestBidder.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AuctionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AuctionStandardScheme getScheme() {
      return new AuctionStandardScheme();
    }
  }

  private static class AuctionStandardScheme extends org.apache.thrift.scheme.StandardScheme<Auction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Auction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ITEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.item = new Item();
              struct.item.read(iprot);
              struct.setItemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HIGHEST_BIDDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.highestBidder = new User();
              struct.highestBidder.read(iprot);
              struct.setHighestBidderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.open = iprot.readBool();
              struct.setOpenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeout = iprot.readI32();
              struct.setTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Auction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.item != null) {
        oprot.writeFieldBegin(ITEM_FIELD_DESC);
        struct.item.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.highestBidder != null) {
        oprot.writeFieldBegin(HIGHEST_BIDDER_FIELD_DESC);
        struct.highestBidder.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPEN_FIELD_DESC);
      oprot.writeBool(struct.open);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
      oprot.writeI32(struct.timeout);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AuctionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AuctionTupleScheme getScheme() {
      return new AuctionTupleScheme();
    }
  }

  private static class AuctionTupleScheme extends org.apache.thrift.scheme.TupleScheme<Auction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Auction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetItem()) {
        optionals.set(0);
      }
      if (struct.isSetHighestBidder()) {
        optionals.set(1);
      }
      if (struct.isSetOpen()) {
        optionals.set(2);
      }
      if (struct.isSetTimeout()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetItem()) {
        struct.item.write(oprot);
      }
      if (struct.isSetHighestBidder()) {
        struct.highestBidder.write(oprot);
      }
      if (struct.isSetOpen()) {
        oprot.writeBool(struct.open);
      }
      if (struct.isSetTimeout()) {
        oprot.writeI32(struct.timeout);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Auction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.item = new Item();
        struct.item.read(iprot);
        struct.setItemIsSet(true);
      }
      if (incoming.get(1)) {
        struct.highestBidder = new User();
        struct.highestBidder.read(iprot);
        struct.setHighestBidderIsSet(true);
      }
      if (incoming.get(2)) {
        struct.open = iprot.readBool();
        struct.setOpenIsSet(true);
      }
      if (incoming.get(3)) {
        struct.timeout = iprot.readI32();
        struct.setTimeoutIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

